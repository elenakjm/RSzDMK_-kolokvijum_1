In archive libusart.a:

usart.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008a0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a23  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .bss.Rx_Buffer_Size 00000001  00000000  00000000  000012f7  2**0
                  ALLOC
  6 .bss.Rx_Buffer_First 00000001  00000000  00000000  000012f7  2**0
                  ALLOC
  7 .bss.Rx_Buffer_Last 00000001  00000000  00000000  000012f7  2**0
                  ALLOC
  8 .text.__vector_18 00000072  00000000  00000000  000012f7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.usartInit 0000009e  00000000  00000000  00001369  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.usartAvailable 00000012  00000000  00000000  00001407  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.usartPutChar 0000002e  00000000  00000000  00001419  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.usartPutString 00000038  00000000  00000000  00001447  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.usartPutString_P 00000050  00000000  00000000  0000147f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.usartGetChar 00000056  00000000  00000000  000014cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.usartGetString 00000062  00000000  00000000  00001525  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.usartPeek 0000003a  00000000  00000000  00001587  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.usartParseInt 000000b6  00000000  00000000  000015c1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.__vector_18:

00000000 <__vector_18>:

	return c;
}

int16_t usartParseInt()
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   c:	3f 93       	push	r19
   e:	8f 93       	push	r24
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	9f 93       	push	r25
  12:	ef 93       	push	r30
  14:	ff 93       	push	r31

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
  16:	df 93       	push	r29
  18:	cf 93       	push	r28
  1a:	cd b7       	in	r28, 0x3d	; 61
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
  1c:	de b7       	in	r29, 0x3e	; 62
  1e:	90 91 00 00 	lds	r25, 0x0000
  22:	29 2f       	mov	r18, r25
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	e6 ec       	ldi	r30, 0xC6	; 198
  28:	f0 e0       	ldi	r31, 0x00	; 0
  2a:	80 81       	ld	r24, Z
  2c:	f9 01       	movw	r30, r18
  2e:	e0 50       	subi	r30, 0x00	; 0
  30:	f0 40       	sbci	r31, 0x00	; 0
  32:	80 83       	st	Z, r24
  34:	89 2f       	mov	r24, r25
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
	{
		c = usartGetChar();
  36:	8f 5f       	subi	r24, 0xFF	; 255
  38:	80 93 00 00 	sts	0x0000, r24
		if(c == '-')
  3c:	80 91 00 00 	lds	r24, 0x0000
  40:	8f 73       	andi	r24, 0x3F	; 63
		{
			sign = -1;
  42:	80 93 00 00 	sts	0x0000, r24
  46:	80 91 00 00 	lds	r24, 0x0000
		}
		else
		{
			res =res * 10 + (c - '0');
  4a:	80 34       	cpi	r24, 0x40	; 64
  4c:	00 f4       	brcc	.+0      	; 0x4e <__vector_18+0x4e>
  4e:	80 91 00 00 	lds	r24, 0x0000
  52:	8f 5f       	subi	r24, 0xFF	; 255
  54:	80 93 00 00 	sts	0x0000, r24
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	ff 91       	pop	r31
  5e:	ef 91       	pop	r30
  60:	9f 91       	pop	r25
  62:	8f 91       	pop	r24
  64:	3f 91       	pop	r19
  66:	2f 91       	pop	r18
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	1f 90       	pop	r1
  70:	18 95       	reti

Disassembly of section .text.usartInit:

00000000 <usartInit>:

	return c;
}

int16_t usartParseInt()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <usartInit+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <usartInit+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <usartInit+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   c:	de b7       	in	r29, 0x3e	; 62
   e:	6b 83       	std	Y+3, r22	; 0x03
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	8d 83       	std	Y+5, r24	; 0x05
  14:	9e 83       	std	Y+6, r25	; 0x06

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
  16:	e0 ec       	ldi	r30, 0xC0	; 192
  18:	f0 e0       	ldi	r31, 0x00	; 0
  1a:	80 e2       	ldi	r24, 0x20	; 32
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
  1c:	80 83       	st	Z, r24
  1e:	e1 ec       	ldi	r30, 0xC1	; 193
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	88 e9       	ldi	r24, 0x98	; 152
  24:	80 83       	st	Z, r24
  26:	e2 ec       	ldi	r30, 0xC2	; 194
  28:	f0 e0       	ldi	r31, 0x00	; 0
  2a:	86 e0       	ldi	r24, 0x06	; 6
  2c:	80 83       	st	Z, r24
  2e:	8b 81       	ldd	r24, Y+3	; 0x03
  30:	9c 81       	ldd	r25, Y+4	; 0x04
  32:	ad 81       	ldd	r26, Y+5	; 0x05
  34:	be 81       	ldd	r27, Y+6	; 0x06
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
	{
		c = usartGetChar();
  36:	88 0f       	add	r24, r24
  38:	99 1f       	adc	r25, r25
  3a:	aa 1f       	adc	r26, r26
		if(c == '-')
  3c:	bb 1f       	adc	r27, r27
  3e:	88 0f       	add	r24, r24
  40:	99 1f       	adc	r25, r25
		{
			sign = -1;
  42:	aa 1f       	adc	r26, r26
  44:	bb 1f       	adc	r27, r27
  46:	88 0f       	add	r24, r24
		}
		else
		{
			res =res * 10 + (c - '0');
  48:	99 1f       	adc	r25, r25
  4a:	aa 1f       	adc	r26, r26
  4c:	bb 1f       	adc	r27, r27
  4e:	88 0f       	add	r24, r24
  50:	99 1f       	adc	r25, r25
  52:	aa 1f       	adc	r26, r26
  54:	bb 1f       	adc	r27, r27
  56:	9c 01       	movw	r18, r24
  58:	ad 01       	movw	r20, r26
  5a:	80 e4       	ldi	r24, 0x40	; 64
  5c:	92 e4       	ldi	r25, 0x42	; 66
  5e:	af e0       	ldi	r26, 0x0F	; 15
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	bc 01       	movw	r22, r24
  64:	cd 01       	movw	r24, r26
  66:	0e 94 00 00 	call	0	; 0x0 <usartInit>
  6a:	da 01       	movw	r26, r20
  6c:	c9 01       	movw	r24, r18
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	9a 83       	std	Y+2, r25	; 0x02
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
  72:	89 83       	std	Y+1, r24	; 0x01
  74:	e5 ec       	ldi	r30, 0xC5	; 197
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	89 81       	ldd	r24, Y+1	; 0x01
  7a:	9a 81       	ldd	r25, Y+2	; 0x02
  7c:	89 2f       	mov	r24, r25
  7e:	99 27       	eor	r25, r25
  80:	80 83       	st	Z, r24
  82:	e4 ec       	ldi	r30, 0xC4	; 196
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	80 83       	st	Z, r24
		{
			res =res * 10 + (c - '0');
		}
	}

	return res * sign;
  8a:	78 94       	sei
  8c:	26 96       	adiw	r28, 0x06	; 6
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
  98:	cf 91       	pop	r28
  9a:	df 91       	pop	r29
  9c:	08 95       	ret

Disassembly of section .text.usartAvailable:

00000000 <usartAvailable>:

	return c;
}

int16_t usartParseInt()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	80 91 00 00 	lds	r24, 0x0000
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   c:	cf 91       	pop	r28
   e:	df 91       	pop	r29
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	08 95       	ret

Disassembly of section .text.usartPutChar:

00000000 <usartPutChar>:

	return c;
}

int16_t usartParseInt()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   c:	e0 ec       	ldi	r30, 0xC0	; 192
   e:	f0 e0       	ldi	r31, 0x00	; 0
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	80 81       	ld	r24, Z
  12:	88 2f       	mov	r24, r24
  14:	90 e0       	ldi	r25, 0x00	; 0

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
  16:	80 72       	andi	r24, 0x20	; 32
  18:	90 70       	andi	r25, 0x00	; 0
  1a:	00 97       	sbiw	r24, 0x00	; 0
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
  1c:	01 f0       	breq	.+0      	; 0x1e <usartPutChar+0x1e>
  1e:	e6 ec       	ldi	r30, 0xC6	; 198
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	89 81       	ldd	r24, Y+1	; 0x01
  24:	80 83       	st	Z, r24
  26:	0f 90       	pop	r0
  28:	cf 91       	pop	r28
  2a:	df 91       	pop	r29
  2c:	08 95       	ret

Disassembly of section .text.usartPutString:

00000000 <usartPutString>:

	return c;
}

int16_t usartParseInt()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <usartPutString+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	00 c0       	rjmp	.+0      	; 0x10 <usartPutString+0x10>
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	e9 81       	ldd	r30, Y+1	; 0x01
  12:	fa 81       	ldd	r31, Y+2	; 0x02
  14:	80 81       	ld	r24, Z

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
  16:	0e 94 00 00 	call	0	; 0x0 <usartPutString>
  1a:	89 81       	ldd	r24, Y+1	; 0x01
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
  1c:	9a 81       	ldd	r25, Y+2	; 0x02
  1e:	01 96       	adiw	r24, 0x01	; 1
  20:	9a 83       	std	Y+2, r25	; 0x02
  22:	89 83       	std	Y+1, r24	; 0x01
  24:	e9 81       	ldd	r30, Y+1	; 0x01
  26:	fa 81       	ldd	r31, Y+2	; 0x02
  28:	80 81       	ld	r24, Z
  2a:	88 23       	and	r24, r24
  2c:	01 f4       	brne	.+0      	; 0x2e <usartPutString+0x2e>
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	cf 91       	pop	r28
  34:	df 91       	pop	r29
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
	{
		c = usartGetChar();
  36:	08 95       	ret

Disassembly of section .text.usartPutString_P:

00000000 <usartPutString_P>:

	return c;
}

int16_t usartParseInt()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <usartPutString_P+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <usartPutString_P+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <usartPutString_P+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9e 83       	std	Y+6, r25	; 0x06
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	8d 83       	std	Y+5, r24	; 0x05
  12:	8d 81       	ldd	r24, Y+5	; 0x05
  14:	9e 81       	ldd	r25, Y+6	; 0x06

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
  16:	9b 83       	std	Y+3, r25	; 0x03
  18:	8a 83       	std	Y+2, r24	; 0x02
  1a:	8d 81       	ldd	r24, Y+5	; 0x05
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
  1c:	9e 81       	ldd	r25, Y+6	; 0x06
  1e:	01 96       	adiw	r24, 0x01	; 1
  20:	9e 83       	std	Y+6, r25	; 0x06
  22:	8d 83       	std	Y+5, r24	; 0x05
  24:	ea 81       	ldd	r30, Y+2	; 0x02
  26:	fb 81       	ldd	r31, Y+3	; 0x03
  28:	84 91       	lpm	r24, Z+
  2a:	89 83       	std	Y+1, r24	; 0x01
  2c:	89 81       	ldd	r24, Y+1	; 0x01
  2e:	8c 83       	std	Y+4, r24	; 0x04
  30:	8c 81       	ldd	r24, Y+4	; 0x04
  32:	88 23       	and	r24, r24
  34:	01 f0       	breq	.+0      	; 0x36 <usartPutString_P+0x36>
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
	{
		c = usartGetChar();
  36:	8c 81       	ldd	r24, Y+4	; 0x04
  38:	0e 94 00 00 	call	0	; 0x0 <usartPutString_P>
		if(c == '-')
  3c:	00 c0       	rjmp	.+0      	; 0x3e <usartPutString_P+0x3e>
  3e:	26 96       	adiw	r28, 0x06	; 6
  40:	0f b6       	in	r0, 0x3f	; 63
		{
			sign = -1;
  42:	f8 94       	cli
  44:	de bf       	out	0x3e, r29	; 62
  46:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			res =res * 10 + (c - '0');
  48:	cd bf       	out	0x3d, r28	; 61
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	08 95       	ret

Disassembly of section .text.usartGetChar:

00000000 <usartGetChar>:

	return c;
}

int16_t usartParseInt()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <usartGetChar+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	80 91 00 00 	lds	r24, 0x0000
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   e:	88 23       	and	r24, r24
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	01 f4       	brne	.+0      	; 0x12 <usartGetChar+0x12>
  12:	8f ef       	ldi	r24, 0xFF	; 255
  14:	8a 83       	std	Y+2, r24	; 0x02

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
  16:	00 c0       	rjmp	.+0      	; 0x18 <usartGetChar+0x18>
  18:	20 91 00 00 	lds	r18, 0x0000
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
  1c:	82 2f       	mov	r24, r18
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	fc 01       	movw	r30, r24
  22:	e0 50       	subi	r30, 0x00	; 0
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	80 81       	ld	r24, Z
  28:	89 83       	std	Y+1, r24	; 0x01
  2a:	82 2f       	mov	r24, r18
  2c:	8f 5f       	subi	r24, 0xFF	; 255
  2e:	80 93 00 00 	sts	0x0000, r24
  32:	80 91 00 00 	lds	r24, 0x0000
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
	{
		c = usartGetChar();
  36:	8f 73       	andi	r24, 0x3F	; 63
  38:	80 93 00 00 	sts	0x0000, r24
		if(c == '-')
  3c:	80 91 00 00 	lds	r24, 0x0000
  40:	81 50       	subi	r24, 0x01	; 1
		{
			sign = -1;
  42:	80 93 00 00 	sts	0x0000, r24
  46:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else
		{
			res =res * 10 + (c - '0');
  48:	8a 83       	std	Y+2, r24	; 0x02
  4a:	8a 81       	ldd	r24, Y+2	; 0x02
  4c:	0f 90       	pop	r0
  4e:	0f 90       	pop	r0
  50:	cf 91       	pop	r28
  52:	df 91       	pop	r29
  54:	08 95       	ret

Disassembly of section .text.usartGetString:

00000000 <usartGetString>:

	return c;
}

int16_t usartParseInt()
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	00 d0       	rcall	.+0      	; 0xa <usartGetString+0xa>
   a:	0f 92       	push	r0
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	9b 83       	std	Y+3, r25	; 0x03
  12:	8a 83       	std	Y+2, r24	; 0x02
  14:	19 82       	std	Y+1, r1	; 0x01

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
  16:	00 c0       	rjmp	.+0      	; 0x18 <usartGetString+0x18>
  18:	89 81       	ldd	r24, Y+1	; 0x01
  1a:	28 2f       	mov	r18, r24
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
  1c:	30 e0       	ldi	r19, 0x00	; 0
  1e:	8a 81       	ldd	r24, Y+2	; 0x02
  20:	9b 81       	ldd	r25, Y+3	; 0x03
  22:	8c 01       	movw	r16, r24
  24:	02 0f       	add	r16, r18
  26:	13 1f       	adc	r17, r19
  28:	0e 94 00 00 	call	0	; 0x0 <usartGetString>
  2c:	f8 01       	movw	r30, r16
  2e:	80 83       	st	Z, r24
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	8f 5f       	subi	r24, 0xFF	; 255
  34:	89 83       	std	Y+1, r24	; 0x01
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
	{
		c = usartGetChar();
  36:	80 91 00 00 	lds	r24, 0x0000
  3a:	88 23       	and	r24, r24
		if(c == '-')
  3c:	01 f4       	brne	.+0      	; 0x3e <usartGetString+0x3e>
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	28 2f       	mov	r18, r24
		{
			sign = -1;
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	8a 81       	ldd	r24, Y+2	; 0x02
  46:	9b 81       	ldd	r25, Y+3	; 0x03
		}
		else
		{
			res =res * 10 + (c - '0');
  48:	fc 01       	movw	r30, r24
  4a:	e2 0f       	add	r30, r18
  4c:	f3 1f       	adc	r31, r19
  4e:	10 82       	st	Z, r1
  50:	89 81       	ldd	r24, Y+1	; 0x01
  52:	0f 90       	pop	r0
  54:	0f 90       	pop	r0
  56:	0f 90       	pop	r0
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	08 95       	ret

Disassembly of section .text.usartPeek:

00000000 <usartPeek>:

	return c;
}

int16_t usartParseInt()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <usartPeek+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	80 91 00 00 	lds	r24, 0x0000
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   e:	88 23       	and	r24, r24
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	01 f4       	brne	.+0      	; 0x12 <usartPeek+0x12>
  12:	8f ef       	ldi	r24, 0xFF	; 255
  14:	8a 83       	std	Y+2, r24	; 0x02

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
  16:	00 c0       	rjmp	.+0      	; 0x18 <usartPeek+0x18>
  18:	80 91 00 00 	lds	r24, 0x0000
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
  1c:	88 2f       	mov	r24, r24
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	fc 01       	movw	r30, r24
  22:	e0 50       	subi	r30, 0x00	; 0
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	80 81       	ld	r24, Z
  28:	89 83       	std	Y+1, r24	; 0x01
  2a:	89 81       	ldd	r24, Y+1	; 0x01
  2c:	8a 83       	std	Y+2, r24	; 0x02
  2e:	8a 81       	ldd	r24, Y+2	; 0x02
  30:	0f 90       	pop	r0
  32:	0f 90       	pop	r0
  34:	cf 91       	pop	r28
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
	{
		c = usartGetChar();
  36:	df 91       	pop	r29
  38:	08 95       	ret

Disassembly of section .text.usartParseInt:

00000000 <usartParseInt>:

	return c;
}

int16_t usartParseInt()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <usartParseInt+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <usartParseInt+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
   c:	1b 82       	std	Y+3, r1	; 0x03
   e:	1a 82       	std	Y+2, r1	; 0x02
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)
  10:	81 e0       	ldi	r24, 0x01	; 1
  12:	89 83       	std	Y+1, r24	; 0x01
  14:	00 c0       	rjmp	.+0      	; 0x16 <usartParseInt+0x16>

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
  16:	0e 94 00 00 	call	0	; 0x0 <usartParseInt>
  1a:	8c 83       	std	Y+4, r24	; 0x04
	int8_t c;
	uint16_t res = 0; // Promenljiva koja sluzi za akumulaciju brojeva koji stizu
	int8_t sign = 1; // Znak nadolazecih cifara (da li su brojevi pozitivni ili negativni)

	// Odstranimo sve karaktere koji nisu cifra ili znak minus
	while((usartPeek() < '0' && usartPeek() != '-') || usartPeek() > '9') // Dokle god prvi karakter nije u intervalu [0, 9] i dokle god nije negativan broj
  1c:	0e 94 00 00 	call	0	; 0x0 <usartParseInt>
  20:	80 33       	cpi	r24, 0x30	; 48
  22:	04 f4       	brge	.+0      	; 0x24 <usartParseInt+0x24>
  24:	0e 94 00 00 	call	0	; 0x0 <usartParseInt>
  28:	8d 32       	cpi	r24, 0x2D	; 45
  2a:	01 f4       	brne	.+0      	; 0x2c <usartParseInt+0x2c>
  2c:	0e 94 00 00 	call	0	; 0x0 <usartParseInt>
  30:	8a 33       	cpi	r24, 0x3A	; 58
  32:	04 f4       	brge	.+0      	; 0x34 <usartParseInt+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <usartParseInt+0x36>
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
	{
		c = usartGetChar();
  36:	0e 94 00 00 	call	0	; 0x0 <usartParseInt>
  3a:	8c 83       	std	Y+4, r24	; 0x04
		if(c == '-')
  3c:	8c 81       	ldd	r24, Y+4	; 0x04
  3e:	8d 32       	cpi	r24, 0x2D	; 45
  40:	01 f4       	brne	.+0      	; 0x42 <usartParseInt+0x42>
		{
			sign = -1;
  42:	8f ef       	ldi	r24, 0xFF	; 255
  44:	89 83       	std	Y+1, r24	; 0x01
  46:	00 c0       	rjmp	.+0      	; 0x48 <usartParseInt+0x48>
		}
		else
		{
			res =res * 10 + (c - '0');
  48:	8a 81       	ldd	r24, Y+2	; 0x02
  4a:	9b 81       	ldd	r25, Y+3	; 0x03
  4c:	9c 01       	movw	r18, r24
  4e:	22 0f       	add	r18, r18
  50:	33 1f       	adc	r19, r19
  52:	c9 01       	movw	r24, r18
  54:	88 0f       	add	r24, r24
  56:	99 1f       	adc	r25, r25
  58:	88 0f       	add	r24, r24
  5a:	99 1f       	adc	r25, r25
  5c:	28 0f       	add	r18, r24
  5e:	39 1f       	adc	r19, r25
  60:	8c 81       	ldd	r24, Y+4	; 0x04
  62:	99 27       	eor	r25, r25
  64:	87 fd       	sbrc	r24, 7
  66:	90 95       	com	r25
  68:	82 0f       	add	r24, r18
  6a:	93 1f       	adc	r25, r19
  6c:	c0 97       	sbiw	r24, 0x30	; 48
  6e:	9b 83       	std	Y+3, r25	; 0x03
  70:	8a 83       	std	Y+2, r24	; 0x02
	{
		c = usartGetChar(); //uklanjamo karakter ako on nije broj
	}

	// Izdvajanje cifara i dobijanje celog broja
	while((usartPeek() >= '0' && usartPeek() <= '9') || usartPeek() == '-')
  72:	0e 94 00 00 	call	0	; 0x0 <usartParseInt>
  76:	80 33       	cpi	r24, 0x30	; 48
  78:	04 f0       	brlt	.+0      	; 0x7a <usartParseInt+0x7a>
  7a:	0e 94 00 00 	call	0	; 0x0 <usartParseInt>
  7e:	8a 33       	cpi	r24, 0x3A	; 58
  80:	04 f0       	brlt	.+0      	; 0x82 <usartParseInt+0x82>
  82:	0e 94 00 00 	call	0	; 0x0 <usartParseInt>
  86:	8d 32       	cpi	r24, 0x2D	; 45
  88:	01 f0       	breq	.+0      	; 0x8a <usartParseInt+0x8a>
		{
			res =res * 10 + (c - '0');
		}
	}

	return res * sign;
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	28 2f       	mov	r18, r24
  8e:	33 27       	eor	r19, r19
  90:	27 fd       	sbrc	r18, 7
  92:	30 95       	com	r19
  94:	8a 81       	ldd	r24, Y+2	; 0x02
  96:	9b 81       	ldd	r25, Y+3	; 0x03
  98:	ac 01       	movw	r20, r24
  9a:	24 9f       	mul	r18, r20
  9c:	c0 01       	movw	r24, r0
  9e:	25 9f       	mul	r18, r21
  a0:	90 0d       	add	r25, r0
  a2:	34 9f       	mul	r19, r20
  a4:	90 0d       	add	r25, r0
  a6:	11 24       	eor	r1, r1
}
  a8:	0f 90       	pop	r0
  aa:	0f 90       	pop	r0
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret
